---
  name: CI
  
  on:
    pull_request:
      branches: [master, nightly]
      types: [opened, synchronize, reopened]
    push:
      branches: [master, nightly]
    workflow_dispatch:
  
  concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true
  
  jobs:
    github_env:
      name: GitHub Env Debug
      runs-on: ubuntu-latest
  
      steps:
        - name: Dump github context
          run: echo "$GITHUB_CONTEXT"
          shell: bash
          env:
            GITHUB_CONTEXT: ${{ toJson(github) }}
  
    check_changelog:
      name: Check Changelog
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          if: ${{ github.ref == 'refs/heads/master' || github.base_ref == 'master' }}
          uses: actions/checkout@v4
  
        - name: Verify Changelog
          id: verify_changelog
          if: ${{ github.ref == 'refs/heads/master' || github.base_ref == 'master' }}
          # base_ref for pull request check, ref for push
          uses: LizardByte/.github/actions/verify_changelog@master
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
      outputs:
        next_version: ${{ steps.verify_changelog.outputs.changelog_parser_version }}
        next_version_bare: ${{ steps.verify_changelog.outputs.changelog_parser_version_bare }}
        last_version: ${{ steps.verify_changelog.outputs.latest_release_tag_name }}
        release_body: ${{ steps.verify_changelog.outputs.changelog_parser_description }}
  
    # todo - remove this job once versioning is fully automated by cmake
    check_versions:
      name: Check Versions
      runs-on: ubuntu-latest
      needs: check_changelog
      if: ${{ github.ref == 'refs/heads/master' || github.base_ref == 'master' }}
      # base_ref for pull request check, ref for push
      steps:
        - name: Checkout
          uses: actions/checkout@v4
  
        - name: Check CMakeLists.txt Version
          run: |
            version=$(grep -o -E '^project\(Sunshine VERSION [0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt | \
              grep -o -E '[0-9]+\.[0-9]+\.[0-9]+')
            echo "cmakelists_version=${version}" >> $GITHUB_ENV
  
        - name: Compare CMakeList.txt Version
          if: ${{ env.cmakelists_version != needs.check_changelog.outputs.next_version_bare }}
          run: |
            echo CMakeLists version: "$cmakelists_version"
            echo Changelog version: "${{ needs.check_changelog.outputs.next_version_bare }}"
            echo Within 'CMakeLists.txt' change "project(Sunshine [VERSION $cmakelists_version]" to \
              "project(Sunshine [VERSION ${{ needs.check_changelog.outputs.next_version_bare }}]"
            exit 1
  
    setup_release:
      name: Setup Release
      needs: check_changelog
      runs-on: ubuntu-latest
      steps:
        - name: Set release details
          id: release_details
          env:
            RELEASE_BODY: ${{ needs.check_changelog.outputs.release_body }}
          run: |
            # determine to create a release or not
            if [[ $GITHUB_EVENT_NAME == "push" ]]; then
              RELEASE=true
            else
              RELEASE=false
            fi
  
            # set the release tag
            COMMIT=${{ github.sha }}
            if [[ $GITHUB_REF == refs/heads/master ]]; then
              TAG="${{ needs.check_changelog.outputs.next_version }}"
              RELEASE_NAME="${{ needs.check_changelog.outputs.next_version }}"
              RELEASE_BODY="$RELEASE_BODY"
              PRE_RELEASE="false"
            elif [[ $GITHUB_REF == refs/heads/nightly ]]; then
              TAG="nightly-dev"
              RELEASE_NAME="nightly"
              RELEASE_BODY="automated nightly release - $(date -u +'%Y-%m-%dT%H:%M:%SZ') - ${COMMIT}"
              PRE_RELEASE="true"
            fi
  
            echo "create_release=${RELEASE}" >> $GITHUB_OUTPUT
            echo "release_tag=${TAG}" >> $GITHUB_OUTPUT
            echo "release_commit=${COMMIT}" >> $GITHUB_OUTPUT
            echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
            echo "pre_release=${PRE_RELEASE}" >> $GITHUB_OUTPUT
  
            # this is stupid but works for multiline strings
            echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_BODY" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
  
      outputs:
        create_release: ${{ steps.release_details.outputs.create_release }}
        release_tag: ${{ steps.release_details.outputs.release_tag }}
        release_commit: ${{ steps.release_details.outputs.release_commit }}
        release_name: ${{ steps.release_details.outputs.release_name }}
        release_body: ${{ env.RELEASE_BODY }}
        pre_release: ${{ steps.release_details.outputs.pre_release }}

    build_win:
      name: Windows
      runs-on: windows-2019
      needs: [check_changelog, setup_release]
  
      steps:
        - name: Checkout
          uses: actions/checkout@v4
          with:
            submodules: recursive
  
        - name: Prepare tests
          id: prepare-tests
          if: false  # todo: DirectX11 is not available, so even software encoder fails
          run: |
            # function to download and extract a zip file
            function DownloadAndExtract {
              param (
                [string]$Uri,
                [string]$OutFile
              )
  
              $maxRetries = 5
              $retryCount = 0
              $success = $false
  
              while (-not $success -and $retryCount -lt $maxRetries) {
                $retryCount++
                Write-Host "Downloading $Uri to $OutFile, attempt $retryCount of $maxRetries"
                try {
                  Invoke-WebRequest -Uri $Uri -OutFile $OutFile
                  $success = $true
                } catch {
                  Write-Host "Attempt $retryCount of $maxRetries failed with error: $($_.Exception.Message). Retrying..."
                  Start-Sleep -Seconds 5
                }
              }
  
              if (-not $success) {
                Write-Host "Failed to download the file after $maxRetries attempts."
                exit 1
              }
  
              # use .NET to get the base name of the file
              $baseName = (Get-Item $OutFile).BaseName
  
              # Extract the zip file
              Expand-Archive -Path $OutFile -DestinationPath $baseName
            }
  
            # virtual display driver
            DownloadAndExtract `
              -Uri "https://www.amyuni.com/downloads/usbmmidd_v2.zip" `
              -OutFile "usbmmidd_v2.zip"
  
            # install
            Set-Location -Path usbmmidd_v2/usbmmidd_v2
            ./deviceinstaller64 install usbmmidd.inf usbmmidd
  
            # create the virtual display
            ./deviceinstaller64 enableidd 1
  
            # move up a directory
            Set-Location -Path ../..
  
            # install devcon
            DownloadAndExtract `
              -Uri "https://github.com/Drawbackz/DevCon-Installer/releases/download/1.4-rc/Devcon.Installer.zip" `
              -OutFile "Devcon.Installer.zip"
            Set-Location -Path Devcon.Installer
            # hash needs to match OS version
            # https://github.com/Drawbackz/DevCon-Installer/blob/master/devcon_sources.json
            Start-Process -FilePath "./Devcon Installer.exe" -Wait -ArgumentList `
              'install', `
              '-hash', '54004C83EE34F6A55380528A8B29F4C400E61FBB947A19E0AB9E5A193D7D961E', `
              '-addpath', `
              '-update', `
              '-dir', 'C:\Windows\System32'
  
            # disable Hyper-V Video
            # https://stackoverflow.com/a/59490940
            C:\Windows\System32\devcon.exe disable "VMBUS\{da0a7802-e377-4aac-8e77-0558eb1073f8}"
  
            # move up a directory
            Set-Location -Path ..
  
            # multi monitor tool
            DownloadAndExtract `
              -Uri "http://www.nirsoft.net/utils/multimonitortool-x64.zip" `
              -OutFile "multimonitortool.zip"
  
            # enable the virtual display
            # http://www.nirsoft.net/utils/multi_monitor_tool.html
            Set-Location -Path multimonitortool
  
            # Original Hyper-V is \\.\DISPLAY1, it will recreate itself as \\.\DISPLAY6 (or something higher than 2)
            # USB Mobile Monitor Virtual Display is \\.\DISPLAY2
  
            # these don't seem to work if not using runAs
            # todo: do they work if not using runAs?
            Start-Process powershell -Verb runAs -ArgumentList '-Command ./MultiMonitorTool.exe /enable \\.\DISPLAY2'
            Start-Process powershell -Verb runAs -ArgumentList '-Command ./MultiMonitorTool.exe /SetPrimary \\.\DISPLAY2'
  
            # wait a few seconds
            Start-Sleep -s 5
  
            # list monitors
            ./MultiMonitorTool.exe /stext monitor_list.txt
  
            # wait a few seconds
            Start-Sleep -s 5
  
            # print the monitor list
            Get-Content -Path monitor_list.txt
  
        - name: Setup Dependencies Windows
          uses: msys2/setup-msys2@v2
          with:
            update: true
            install: >-
              base-devel
              diffutils
              doxygen
              git
              make
              mingw-w64-x86_64-binutils
              mingw-w64-x86_64-boost
              mingw-w64-x86_64-cmake
              mingw-w64-x86_64-curl
              mingw-w64-x86_64-graphviz
              mingw-w64-x86_64-miniupnpc
              mingw-w64-x86_64-nodejs
              mingw-w64-x86_64-nsis
              mingw-w64-x86_64-onevpl
              mingw-w64-x86_64-openssl
              mingw-w64-x86_64-opus
              mingw-w64-x86_64-toolchain
              nasm
              wget
              yasm
  
        - name: Setup python
          # use this instead of msys2 python due to known issues using wheels, https://www.msys2.org/docs/python/
          id: setup-python
          uses: actions/setup-python@v5
          with:
            python-version: '3.11'
  
        - name: Python Path
          id: python-path
          shell: msys2 {0}
          run: |
            # replace backslashes with double backslashes
            python_path=$(echo "${{ steps.setup-python.outputs.python-path }}" | sed 's/\\/\\\\/g')
  
            # step output
            echo "python-path=${python_path}"
            echo "python-path=${python_path}" >> $GITHUB_OUTPUT
  
        - name: Build Windows
          shell: msys2 {0}
          env:
            BRANCH: ${{ github.head_ref || github.ref_name }}
            BUILD_VERSION: ${{ needs.check_changelog.outputs.next_version }}
            COMMIT: ${{ github.event.pull_request.head.sha || github.sha }}
          run: |
            mkdir build
            cd build
            cmake \
              -DBUILD_WERROR=ON \
              -DCMAKE_BUILD_TYPE=RelWithDebInfo \
              -DSUNSHINE_ASSETS_DIR=assets \
              -DTESTS_PYTHON_EXECUTABLE='${{ steps.python-path.outputs.python-path }}' \
              -DTESTS_SOFTWARE_ENCODER_UNAVAILABLE='skip' \
              -G "MinGW Makefiles" \
              ..
            mingw32-make -j$(nproc)
  
        - name: Package Windows
          shell: msys2 {0}
          run: |
            mkdir -p artifacts
            cd build
  
            # package
            cpack -G NSIS
            cpack -G ZIP
  
            # move
            mv ./cpack_artifacts/Sunshine.exe ../artifacts/sunshine-windows-installer.exe
            mv ./cpack_artifacts/Sunshine.zip ../artifacts/sunshine-windows-portable.zip
  
        - name: Run tests
          id: test
          shell: msys2 {0}
          working-directory: build/tests
          run: |
            ./test_sunshine.exe --gtest_color=yes
  
        - name: Generate gcov report
          # any except canceled or skipped
          if: always() && (steps.test.outcome == 'success' || steps.test.outcome == 'failure')
          id: test_report
          shell: msys2 {0}
          working-directory: build
          run: |
            ${{ steps.python-path.outputs.python-path }} -m pip install gcovr
            ${{ steps.python-path.outputs.python-path }} -m gcovr -r .. \
              --exclude '.*tests/.*' \
              --exclude '.*tests/.*' \
              --xml-pretty \
              -o coverage.xml
  
        - name: Upload coverage
          # any except canceled or skipped
          if: >-
            always() &&
            (steps.test_report.outcome == 'success') &&
            startsWith(github.repository, 'LizardByte/')
          uses: codecov/codecov-action@v4
          with:
            disable_search: true
            fail_ci_if_error: true
            files: ./build/coverage.xml
            flags: ${{ runner.os }}
            token: ${{ secrets.CODECOV_TOKEN }}
  
        - name: Package Windows Debug Info
          working-directory: build
          run: |
            # use .dbg file extension for binaries to avoid confusion with real packages
            Get-ChildItem -File -Recurse | `
              % { Rename-Item -Path $_.PSPath -NewName $_.Name.Replace(".exe",".dbg") }
  
            # save the binaries with debug info
            7z -r `
              "-xr!CMakeFiles" `
              "-xr!cpack_artifacts" `
              a "../artifacts/sunshine-win32-debuginfo.7z" "*.dbg"
  
        - name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: sunshine-windows
            path: artifacts/
  
        - name: Create/Update GitHub Release
          if: ${{ needs.setup_release.outputs.create_release == 'true' }}
          uses: ncipollo/release-action@v1
          with:
            name: ${{ needs.setup_release.outputs.release_name }}
            tag: ${{ needs.setup_release.outputs.release_tag }}
            commit: ${{ needs.setup_release.outputs.release_commit }}
            artifacts: "*artifacts/*"
            token: ${{ secrets.GH_BOT_TOKEN }}
            allowUpdates: true
            body: ${{ needs.setup_release.outputs.release_body }}
            discussionCategory: announcements
            prerelease: ${{ needs.setup_release.outputs.pre_release }}
  
    release-winget:
      name: Release to WinGet
      needs: [setup_release, build_win]
      if: |
        (github.repository_owner == 'LizardByte' &&
        needs.setup_release.outputs.create_release == 'true' &&
        github.ref == 'refs/heads/master')
      runs-on: ubuntu-latest
      steps:
        - name: Release to WinGet
          uses: vedantmgoyal2009/winget-releaser@v2
          with:
            identifier: LizardByte.Sunshine
            release-tag: ${{ needs.setup_release.outputs.release_tag }}
            installers-regex: '\.exe$'  # only .exe files
            token: ${{ secrets.GH_BOT_TOKEN }}